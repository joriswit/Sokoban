apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'

def keystorePropertiesFile = rootProject.file("keystore.properties")

android {
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    testOptions.unitTests.all {
        jacoco.includeNoLocationClasses = true
    }

    signingConfigs {
        if (keystorePropertiesFile.exists()) {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            sokoban {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        applicationId "com.starsep.sokoban"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 9
        versionName "1.8"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.sokoban
            }
            return true
        }
        debug {
            // testCoverageEnabled true
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.sokoban
            }
            return true
        }
    }
}


project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def realVariantName = variant.name
        def variantName = variant.name.capitalize()

        def task = project.tasks["jacocoTest${variantName}UnitTestReport"]
        def defaultExcludes = task.classDirectories.excludes

        def excludes = defaultExcludes

        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${realVariantName}", excludes: excludes)

        task.classDirectories.excludes = excludes
        task.classDirectories += kotlinDebugTree
    }
}


jacocoAndroidUnitTestReport {
    xml.enabled true
    html.enabled true
}

check.dependsOn jacocoTestReport

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "android.arch.lifecycle:extensions:1.0.0"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.google.android.gms:play-services-games:11.6.2'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-annotations:27.0.2'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation('org.powermock:powermock-module-junit4:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation "org.robolectric:robolectric:3.5.1"
}
